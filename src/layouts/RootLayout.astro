---
interface Props {
	title: string;
}

const { title } = Astro.props;
import Column from "@/components/Column.astro";
import Footer from "../components/Footer.astro";
import { Navigation } from "@/components/NavigationMenu";
import "@/styles/globals.css";
---

<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="Astro description" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
	</head>
	<body>
		<div class="flex flex-col h-screen bg-theme-bg">
			<div
				class="py-3 px-96 absolute max-h-16 w-full shadow-sm flex justify-between"
			>
				<a href="/" class="font-bold flex flex-col justify-center">
					HEXW</a
				>
				<Navigation client:idle />
			</div>
			<div class="flex h-screen mt-16">
				<div class="w-1/4">
					<!-- <Column /> -->
				</div>
				<div class="w-1/2 flex flex-col items-center justify-center">
					<slot />
				</div>
				<div class="w-1/4"></div>
			</div>
			<div
				class="py-1 px-3 mx-auto w-full md:flex md:justify-between max-w-6xl md:px-4 rounded-sm"
			>
				<Footer />
			</div>
		</div>
	</body>
</html>
<style></style>

<script is:inline>
	const getThemePreference = () => {
		if (
			typeof localStorage !== "undefined" &&
			localStorage.getItem("theme")
		) {
			return localStorage.getItem("theme");
		}
		return window.matchMedia("(prefers-color-scheme: dark)").matches
			? "dark"
			: "light";
	};
	const isDark = getThemePreference() === "dark";
	document.documentElement.classList[isDark ? "add" : "remove"]("dark");

	if (typeof localStorage !== "undefined") {
		const observer = new MutationObserver(() => {
			const isDark = document.documentElement.classList.contains("dark");
			localStorage.setItem("theme", isDark ? "dark" : "light");
		});
		observer.observe(document.documentElement, {
			attributes: true,
			attributeFilter: ["class"],
		});
	}
</script>
