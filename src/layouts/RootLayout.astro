---
import { LOCALE } from "@/config";
import { ViewTransitions } from "astro:transitions";
interface Props {
	title: string;
}

const { title } = Astro.props;
import Footer from "../components/Footer.astro";
import { Navigation } from "@/components/NavigationMenu";
import "@/styles/globals.css";
---

<!doctype html>
<html lang=`${LOCALE.lang ?? "en"}`>
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="Astro description" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<link rel="sitemap" href="/sitemap-index.xml" />
		<meta name="generator" content={Astro.generator} />
		<ViewTransitions />
		<title>{title}</title>
	</head>
	<body class="">
		<div class="flex flex-col h-screen">
			<div
				class="py-3 px-96 fixed top-0 z-0 max-h-[7%] w-full flex justify-between backdrop-blur"
			>
				<div class="flex">
					<a
						href="/"
						class="font-bold flex-col mx-2 2xl:flex 2xl:justify-center xl:flex xl:justify-center hidden"
					>
						<span
							><span class="text-ring text-lg">「</span>HEXW<span
								class="text-ring text-lg">」</span
							></span
						>
					</a>
				</div>

				<Navigation client:idle transition:persist />
			</div>
			<div class="mt-[5%] flex flex-1">
				<!-- <div class="h-screen mt-16"> -->
				<slot />
			</div>
			<div class="py-1 sticky top-0 z-0 w-full md:flex h-[4%]">
				<Footer />
			</div>
		</div>
		<style></style>

		<script>
			import { isDark } from "@/store.ts";
			// 从localstorage|系统获取主题
			const getThemePreference = () => {
				if (
					typeof localStorage !== "undefined" &&
					localStorage.getItem("theme")
				) {
					return localStorage.getItem("theme");
				}
				return window.matchMedia("(prefers-color-scheme: dark)").matches
					? "dark"
					: "light";
			};
			// 是dark模式就在dom中添加dark
			isDark.set(getThemePreference() === "dark");
			console.log("isDark1:" + isDark.get());
			document.documentElement.classList[isDark.get() ? "add" : "remove"](
				"dark",
			);
			// localStorage存在就添加observer，当class变化时触发回调
			if (typeof localStorage !== "undefined") {
				const observer = new MutationObserver(() => {
					const isDark =
						document.documentElement.classList.contains("dark");
					localStorage.setItem("theme", isDark ? "dark" : "light");
				});
				observer.observe(document.documentElement, {
					attributes: true,
					attributeFilter: ["class"],
				});
			}
		</script>
		<script>
			import { isDark } from "@/store.ts";
			document.addEventListener("astro:before-swap", () => {
				// 从localstorage|系统获取主题
				const getThemePreference = () => {
					if (
						typeof localStorage !== "undefined" &&
						localStorage.getItem("theme")
					) {
						return localStorage.getItem("theme");
					}
					return window.matchMedia("(prefers-color-scheme: dark)")
						.matches
						? "dark"
						: "light";
				};
				// 是dark模式就在dom中添加dark
				isDark.set(getThemePreference() === "dark");
				console.log("isDark:" + isDark.get());
			});
			document.addEventListener("astro:after-swap", () => {
				document.documentElement.classList[
					isDark.get() ? "add" : "remove"
				]("dark");
			});
		</script>
		<script
			is:inline
			defer
			src="https://us.umami.is/script.js"
			data-website-id="374a351f-8ed2-4bb5-b1fe-ca650822a7d7"></script>
	</body>
</html>
